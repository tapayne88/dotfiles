set -g history-limit 10000
set -g base-index 1
set -sg escape-time 0
set -g allow-rename off
set -g default-command ""

set -g default-terminal "${TERM}"

if-shell '[ $TERM = "xterm-kitty" ]' {
  set -sa terminal-overrides ',xterm-256color:RGB'
  set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
  set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
} {
  set -g default-terminal "xterm-256color"
  set -sa terminal-overrides ',xterm-256color:RGB'
}

set -g mode-keys vi
set -g focus-events on

# Source local config file - if it exists
source-file -q "$HOME/.tmux.local.conf"

# Unset theme should defualt to nord
if-shell '[ $($HOME/.local/bin/term-theme echo) = "light" ]' {
  source-file -q "$HOME/.tmux/tmux_tokyonight_day.conf"
} {
  source-file -q "$HOME/.tmux/tmux_nord.conf"
}

# New window at current path
bind > new-window -c "#{pane_current_path}"

# Run commands across all panes
bind a set-window-option synchronize-panes

# Pane layout options
bind ! select-layout even-vertical      # Shift + 1
bind @ select-layout even-horizontal    # Shift + 2

# Toggle mouse on
bind-key M \
  set-option -g mouse on \;\
  display-message 'Mouse: ON'

# Toggle mouse off
bind-key m \
  set-option -g mouse off \;\
  display-message 'Mouse: OFF'

# Window navigation (mac like replaces iTerms tab navigation)
bind -n "M-{" prev            # Send HEX Code: 0x02 0x70
bind -n "M-}" next            # Send HEX Code: 0x02 0x6E

# Fullscreen pane toggle
bind -n C-X resize-pane -Z

# Swap current pane with last pane
bind C-o select-pane -l \; swap-pane -s '!'

bind-key -r i run-shell "tmux neww ~/.local/bin/tmux-cht.sh"

# keybindings to make resizing easier
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# Status bar / window
set -g status on
set -g status-justify "left"
set -g status-left-length 15
set -g status-right-length 150
set -g window-status-separator ""

# Reset styles
set -g status-left-style NONE
set -g status-right-style NONE

# Split creation
bind '|' split-window -h -c "#{pane_current_path}"
bind '\' split-window -h -c "#{pane_current_path}"
bind '-' split-window -v -c "#{pane_current_path}"
bind '_' split-window -v -c "#{pane_current_path}"

# Reset pane sizes to current layout
bind '=' select-layout

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Shortcut for jumping into scroll-mode when not in vim
bind-key -n 'C-y' if-shell "$is_vim" 'send-keys C-y' 'copy-mode'

bind-key -n 'C-h' if-shell "$is_vim" \
  'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" \
  'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" \
  'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" \
  'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

# Provide way to clear terminal (since Ctrl-l is taken)
bind -n C-M-l run "tmux send-keys C-l"

# Easier inline selection
bind -T copy-mode-vi 'v' send -X begin-selection

######################################
# tmux-plugins/tmux-prefix-highlight #
######################################
set -g @prefix_highlight_prefix_prompt '^b'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_prompt 'copy'

##########################
# yardnsm/tmux-1password #
##########################
# Filter for cli tags - without below, default filtering excludes anything without a url
set -g @1password-items-jq-filter '\
  .[] \
  | [select(.overview.tags | map(select(. == "cli")) | length == 1)?] \
  | map([ .overview.title, .uuid ] \
  | join(",")) \
  | .[] \
'

#########################
# fcsonline/tmux-thumbs #
#########################
set -g @thumbs-key c-f
#{{- if eq "crostini" .ostype }}
set -g @thumbs-command 'echo -n {} | xsel --clipboard && tmux display-message "Copied {}"'
#{{- end }}
#{{- if eq "macOS" .ostype }}
set -g @thumbs-command 'echo -n {} | pbcopy && tmux display-message "Copied {}"'
#{{- end }}
set -g @thumbs-upcase-command 'tmux set-buffer {} && tmux paste-buffer'

##########################
# tmux-plugins/tmux-yank #
##########################
#{{- if eq "crostini" .ostype }}
set -g @override_copy_command 'xsel --clipboard'
#{{- end }}
set -g @shell_mode 'vi'

# tpm plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'jbnicolai/tmux-fpp'
set -g @plugin 'yardnsm/tmux-1password'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/vim-tmux-focus-events'
set -g @plugin 'fcsonline/tmux-thumbs'

# Install tpm if not installed
if "test ! -d ~/.tmux/plugins/tpm" {
  display-message -d 0 'Installing tpm...'
  run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'
  display-message -d 0 'Installing tpm plugins...'
  run '~/.tmux/plugins/tpm/bin/install_plugins'
}

run '~/.tmux/plugins/tpm/tpm'
