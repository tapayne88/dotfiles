-- vim:ft=lua

-- constants to ensure consistent markdown rendering
local markdown = {
  ft = { 'markdown', 'Avante' },
  anti_conceal = {
    anti_conceal = { enabled = false },
    win_options = { concealcursor = { rendered = 'nvic' } },
  },
}

return {
  {
    'zbirenbaum/copilot.lua',
    -- {{- if not .features.neovim_copilot }}
    enabled = false,
    -- {{- end }}
    cmd = 'Copilot',
    event = 'InsertEnter',
    dependencies = {
      'hrsh7th/nvim-cmp',
      'zbirenbaum/copilot-cmp',
    },
    config = function()
      local disabled_directories = {}

      require('plenary.async').run(function()
        local asdf_node_executable = require('tap.utils.async').get_asdf_global_executable 'node'
        if asdf_node_executable == nil then
          return
        end

        require('copilot').setup {
          suggestion = { enabled = false },
          panel = { enabled = false },
          filetypes = {
            ['*'] = function()
              local fully_qualified_filename = vim.api.nvim_buf_get_name(0)

              for _, directory in ipairs(disabled_directories) do
                if string.match(fully_qualified_filename, directory) then
                  return false
                end
              end

              return true
            end,
          },
          -- Set copilot to alway use asdf global node version
          copilot_node_command = asdf_node_executable,
        }
        require('copilot_cmp').setup()

        local progress_kind_map = {
          InProgress = 'begin',
          Normal = 'end',
          Warning = 'report',
          [''] = 'report',
        }

        -- Register for notifications of request status
        require('copilot.api').register_status_notification_handler(function(status)
          local client_id = require('copilot.client').id
          if client_id == nil then
            return
          end

          local msg = {
            token = 'copilot',
            value = {
              title = 'copilot',
              kind = progress_kind_map[status.status],
              message = status.message,
            },
          }
          local ctx = { client_id = client_id }

          require('tap.utils').logger.info(
            string.format(
              '[copilot] dispatching to $/progress msg: `%s` and ctx: `%s`',
              vim.inspect(msg),
              vim.inspect(ctx)
            )
          )

          -- Dispatch request status to fidget.nvim
          vim.lsp.handlers['$/progress'](nil, msg, ctx)
        end)
      end, require('tap.utils').noop)
    end,
  },

  {
    'yetone/avante.nvim',
    event = 'VeryLazy',
    -- {{- if not .features.neovim_copilot }}
    enabled = false,
    -- {{- end }}
    version = false, -- Never set this value to "*"! Never!
    opts = {
      provider = 'copilot',
    },
    -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
    build = 'make',
    dependencies = {
      'nvim-treesitter/nvim-treesitter',
      'stevearc/dressing.nvim',
      'nvim-lua/plenary.nvim',
      'MunifTanjim/nui.nvim',
      --- The below dependencies are optional,
      'echasnovski/mini.pick', -- for file_selector provider mini.pick
      'nvim-telescope/telescope.nvim', -- for file_selector provider telescope
      'hrsh7th/nvim-cmp', -- autocompletion for avante commands and mentions
      'ibhagwan/fzf-lua', -- for file_selector provider fzf
      'nvim-tree/nvim-web-devicons', -- or echasnovski/mini.icons
      'zbirenbaum/copilot.lua', -- for providers='copilot'
      {
        -- support for image pasting
        'HakonHarnes/img-clip.nvim',
        event = 'VeryLazy',
        opts = {
          -- recommended settings
          default = {
            embed_image_as_base64 = false,
            prompt_for_file_name = false,
            drag_and_drop = {
              insert_mode = true,
            },
          },
        },
      },
      {
        -- Make sure to set this up properly if you have lazy=true
        'MeanderingProgrammer/render-markdown.nvim',
        ---@module 'render-markdown'
        ---@type render.md.UserConfig
        opts = {
          render_modes = { 'n', 'i', 'no', 'c', 't', 'v', 'V' },
          latex = {
            render_modes = true,
          },
          heading = {
            sign = true,
            render_modes = true,
            icons = { '󰎥 ', '󰎨 ', '󰎫 ', '󰎲 ', '󰎯 ', '󰎴 ' },
          },
          paragraph = {
            render_modes = true,
            left_margin = 2,
          },
          code = {
            sign = true,
            width = 'full',
            render_modes = true,
          },
          dash = {
            render_modes = true,
          },
          bullet = {
            render_modes = true,
          },
          checkbox = {
            render_modes = true,
          },
          quote = {
            render_modes = true,
          },
          pipe_table = {
            render_modes = true,
          },
          link = {
            render_modes = true,
          },
          inline_highlight = {
            render_modes = true,
          },
          html = {
            render_modes = true,
          },
          file_types = markdown.ft,
          overrides = {
            buflisted = {
              [false] = markdown.anti_conceal,
            },
            buftype = {
              nofile = markdown.anti_conceal,
            },
          },
        },
        ft = markdown.ft,
      },
    },
  },
}
