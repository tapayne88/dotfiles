[user]
  name = Tom Payne
  # default to personal email
  email = {{ .email.personal }}

# If in repo within `work` directory, use work email
[includeIf "gitdir:work/"]
  path = .gitconfig-work

[init]
  templateDir = {{ .chezmoi.sourceDir }}/misc/git_template

[core]
  pager = delta --features default

[color]
  diff = auto
  status = auto
  branch = auto
  ui = true

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = reverse bold red
  newNormal = green bold
  newHighlight = reverse bold green

[pull]
  ff = only
  rebase = true

[push]
  default = current

[pretty]
  better-oneline = "format:%C(auto)%h%d %s %Cblue[%cn]"
  summary = "format:%C(yellow)%H%C(red)%d%n%C(blue)%cd %an%n%C(reset)%s%n"

[feature]
  # Support repos with large number of files, improving git status and git
  # commit performance. See `man git-config` for details
  # https://github.com/starship/starship/issues/1617#issuecomment-885959971
  manyFiles = true

[alias]
  a = "!f() { if [ -n \"$*\" ]; then git add $*; else git add-fzf; fi }; f"
  add-fzf = "!f() { FILES=$(git status --short | grep -E \"^.[^ ]\" | fzf --multi --height 15 --preview \"[ {1} = '??' ] && bat {2} || (git diff {2} | delta --features fzf)\" | awk '{ print $2 }'); [ -n \"$FILES\" ] && git add $FILES; }; f"
  st = status
  cm = commit
  cma = commit --amend
  cmae = commit --amend --no-edit
  co = "!f() { if [ -n \"$*\" ]; then git checkout-command $*; else git checkout-fzf; fi }; f"
  checkout-fzf = "!f() { BRANCH=$(git branch --sort=-committerdate | fzf --height 15 --preview \"git show $(echo {1} | tr -d '[:space:]') | delta --features fzf\" | sed 's/^* //'); [ -n \"$BRANCH\" ] && git checkout-command $BRANCH; }; f"
  checkout-command = checkout --ignore-other-worktrees
  pl = pull
  ft = fetch
  mg = merge
  mb = merge --no-ff --no-commit
  cp = cherry-pick
  rb = rebase
  ru = reset --hard @{u}
  rs = "!f() { if [ -n \"$*\" ]; then git reset $*; else git reset-fzf; fi }; f"
  reset-fzf = "!f() { FILES=$(git status --short | grep -E \"^[^ \\?]\" | fzf --multi --height 15 --preview \"git diff HEAD {2} | delta --features fzf\" | awk '{ print $2 }'); [ -n \"$FILES\" ] && git reset HEAD $FILES; }; f"
  inject = "!f() { set -e; HASH=`git show $1 --pretty=format:\"%H\" -q`; shift; git commit --fixup=$HASH $*; [ -n \"$(git diff-files)\" ] && git stash && DIRTY=1; git rebase $HASH^^ -i --rebase-merges --autosquash; [ -n \"$DIRTY\" ] && git stash pop;}; f"
  ps = push
  psf = push --force-with-lease
  psu = push -u
  br = branch
  df = diff
  dfc = diff --cached
  dfu = !sh -c 'git diff $0..@{u} $@' 2> /dev/null
  dt = difftool
  review = difftool @{u}
  grp = grep -I -n
  l = "!f() { git log --pretty=better-oneline --color=always | fzf --ansi --preview \"git show $(echo {1} | tr -d '[:space:]') | delta --features fzf\"; }; f"
  lb = l origin/master..
  lu = l @{u}
  lg = log --pretty=summary --date='format:%Y-%m-%d %H:%M'
  lgb = lg origin/master..
  lgu = lg @{u}
  tree = log --pretty=better-oneline --all --graph
  prune-local = "!git branch -vv | grep -nE 'origin/.*: gone' | awk '{print $2}' | xargs git branch -D"
  git = !exec git
  alias = !git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
  which = "!f() { [ -n \"$1\" ] && ALIAS=`git alias | grep \"^$1 \"`; [ -n \"$ALIAS\" ] && echo \"$ALIAS\" || echo \"$1 not found\"; }; f"

[diff]
  renameLimit = 5000
  tool = fugitive
  compactionHeuristic = 1
  colorMoved = default

[difftool "fugitive"]
  cmd = vim -c \"execute 'Gstatus' | wincmd p | Gvdiff ~1\" $MERGED

[merge]
  tool = splice

[bash]
  showDirtyState = true

[interactive]
  diffFilter = delta --features default --color-only

[delta "default"]
  navigate = true
  side-by-side = true
  features = nord-theme

[delta "nord-theme"]
  line-numbers-zero-style = blue
  line-numbers-minus-style = white red
  line-numbers-plus-style = black green
  minus-style = syntax
  minus-emph-style = white red
  plus-style = syntax
  plus-emph-style = black green
  syntax-theme = Nord

[delta "fzf"]
  line-numbers = true
  features = nord-theme
