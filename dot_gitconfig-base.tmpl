# vim:ft=gitconfig
[user]
  name = Tom Payne
  # default to personal email
  email = {{ .email.personal }}

[init]
  templateDir = {{ .chezmoi.sourceDir }}/misc/git_template

[core]
  pager = delta

# Without the below my p10k prompt would show incorrect git status info, see issue
# https://github.com/romkatv/powerlevel10k/issues/2232#issuecomment-1478166292
[index]
  skipHash = false

[color]
  diff = auto
  status = auto
  branch = auto
  ui = true

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = reverse bold red
  newNormal = green bold
  newHighlight = reverse bold green

[pull]
  ff = only
  rebase = true

# REuse REcorded REsolution - remember how conflicts were fixed and reapply them
[rerere]
  enabled = true

[fetch]
  prune = true

[push]
  default = current

[pretty]
  better-oneline = "format:%C(auto)%h%d %s %Cblue[%cn]"
  summary = "format:%C(yellow)%H%C(red)%d%n%C(blue)%cd %an%n%C(reset)%s%n"

[feature]
  # Support repos with large number of files, improving git status and git
  # commit performance. See `man git-config` for details
  # https://github.com/starship/starship/issues/1617#issuecomment-885959971
  manyFiles = true

[alias]
  a = forgit add
  st = status
  cm = commit
  cma = commit --amend
  cmae = commit --amend --no-edit
  co = "!f() { if [ -n \"$*\" ]; then git checkout-command $*; else git forgit checkout_branch; fi }; f"
  checkout-command = checkout --ignore-other-worktrees
  pl = pull
  ft = fetch
  mg = merge
  mb = merge --no-ff --no-commit
  cp = cherry-pick
  rb = rebase
  ru = reset --hard @{u}
  rs = "!f() { if [ -n \"$*\" ]; then git reset $*; else git forgit reset_head; fi }; f"
  inject = "!f() { set -e; HASH=`git show $1 --pretty=format:\"%H\" -q`; shift; git commit --fixup=$HASH $*; [ -n \"$(git diff-files)\" ] && git stash && DIRTY=1; git rebase $HASH^^ -i --rebase-merges --autosquash; [ -n \"$DIRTY\" ] && git stash pop;}; f"
  fixup = forgit fixup
  ps = push
  psf = push --force-with-lease --force-if-includes
  psu = push -u
  br = branch --sort=-committerdate
  df = diff
  dfc = diff --cached
  dfu = !sh -c 'git diff $0..@{u} $@' 2> /dev/null
  dt = difftool
  review = difftool @{u}
  grp = grep -I -n
  l = forgit log
  lb = l origin/master..
  lu = l @{u}
  lg = log --pretty=summary --date='format:%Y-%m-%d %H:%M'
  lgb = lg origin/master..
  lgu = lg @{u}
  tree = log --pretty=better-oneline --all --graph
  prune-local = "!f() { DANGLING_BRANCHES=$(git branch -vv | grep -E 'origin/.*: gone'); echo \"Local branches missing corresponding branch on origin:\n$DANGLING_BRANCHES\n\nRemove the above branches? (y/n)\"; read -r answer < /dev/tty; [ \"$answer\" = \"y\" ] && echo \"$DANGLING_BRANCHES\" | awk '{ print $1 }' | xargs git branch -D; }; f"
  git = !exec git
  alias = !git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
  which = "!f() { [ -n \"$1\" ] && ALIAS=`git alias | grep \"^$1 \"`; [ -n \"$ALIAS\" ] && echo \"$ALIAS\" || echo \"$1 not found\"; }; f"
  stls = "git forgit stash_show"

  # Git town aliases
  append = town append --detached
  compress = town compress
  contribute = town contribute
  diff-parent = town diff-parent
  hack = town hack --detached
  delete = town delete
  observe = town observe
  park = town park
  prepend = town prepend --detached
  propose = town propose
  rename = town rename
  repo = town repo
  set-parent = town set-parent
  ship = town ship
  sync = town sync --stack

[diff]
  renameLimit = 5000
  tool = fugitive
  compactionHeuristic = 1
  colorMoved = default

[difftool "fugitive"]
  cmd = vim -c \"execute 'Gstatus' | wincmd p | Gvdiff ~1\" $MERGED

[merge]
  conflictStyle = zdiff3

[mergetool]
  hideResolved = true

[bash]
  showDirtyState = true

[interactive]
  diffFilter = delta --color-only

[include]
  path = ~/.gitconfig-theme

[include]
  path = ~/.catppuccin.gitconfig

[delta]
  navigate = true
  side-by-side = true
