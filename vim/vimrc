"" ==================== Vundle ====================
set nocompatible               " be iMproved
filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Include Vundle
Bundle 'gmarik/vundle'

" Include github plugins
Bundle 'altercation/vim-colors-solarized'
Bundle 'Xuyuanp/git-nerdtree'
Bundle 'bogado/file-line'
Bundle 'majutsushi/tagbar'
Bundle 'godlygeek/tabular'
Bundle 'kien/ctrlp.vim'
Bundle 'airblade/vim-gitgutter'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-characterize'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-eunuch'
Bundle 'tpope/vim-obsession'
Bundle 'itchyny/lightline.vim'
Bundle 'tpope/vim-surround'
Bundle 'mattn/emmet-vim'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'tpope/vim-dispatch'
Bundle 'scrooloose/syntastic'

Bundle 'tapayne88/vim-phpunit'
Bundle 'tapayne88/vim-mochajs'


"" ==================== Testing Area ====================
let g:NERDTreeUseSimpleIndicator = 1


"" ==================== General ====================
filetype plugin indent on
set number                      "Adds line numbers
set shiftwidth=4                "Determines indentation in normal mode (using '>>' or '<<')
set tabstop=8                   "Changes tabs to 4 spaces
set softtabstop=4               "Let backspace delete indent
set expandtab                   "Expands tabs to spaces, better for formatting
set ls=2                        "Show filename perminently
set autoindent                  "Sets up auto indent (copies indentation from line above)
set backspace=2                 "Makes backspace key behave properly in insert mode
set ruler                       "Adds line and column number in status bar and shows progress through file
set hlsearch                    "Highlight search
set incsearch                   "Highlight dynamically as pattern is typed
set noshowmode                  "Hide the default mode text (e.g. -- INSERT -- below the statusline)
set wildignorecase              "Ignore case when opening files
set cursorline                  "Highlight line the cursor is on
set t_Co=16                     "Set to 16 for best compatibility with solarized
set ignorecase                  "Case insensitive search
set smartcase                   "Case sensitive when search contains upper-case characters

" Better split defaults
set splitbelow
set splitright

let mapleader = ","

" Remove escape delay
if ! has('gui_running')
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        au InsertEnter * set timeoutlen=0
        au InsertLeave * set timeoutlen=1000
    augroup END
endif

" Centralise backups, swapsfiles and undo history
set backupdir=~/.vim/backups
set directory=~/.vim/swaps
if exists("&undodir")
    set undodir=~/.vim/undo
endif

autocmd BufWinLeave ?* mkview
autocmd BufWinEnter ?* silent loadview

" Disable cursorline in ruby file as it causes very slow line skipping
autocmd FileType ruby set nocursorline


"" ==================== Solarized ====================
" Solarized colour scheme, depends on Pathogen
syntax enable
set background=dark

let g:solarized_termcolors=&t_Co
let g:solarized_termtrans=1
let g:solarized_degrade=0
let g:solarized_contrast="high"
let g:solarized_visibility="high"

colorscheme solarized


"" ==================== Lightline ====================
let g:lightline = {
      \ 'colorscheme': '16color',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'git' ], [ 'filename' ] ],
      \   'right': [ [ 'percent', 'syntastic', 'lineinfo' ], [ 'fileinfo' ], ['filetype'] ]
      \ },
      \ 'component_function': {
      \     'git': 'MyGit',
      \     'filename': 'MyFilename',
      \     'fileinfo': 'MyFileInfo'
      \ }
    \}

function! MyFileInfo()
    return &fileencoding.'['.&fileformat.']'
endfunction

function! MyReadonly()
    if &filetype == "help"
        return ""
    elseif &readonly
        return ""
    else
        return ""
    endif
endfunction

function! MyModified()
    if &filetype == "help"
        return ""
    elseif &modified
        return "±"
    elseif &modifiable
        return ""
    else
        return ""
    endif
endfunction

function! MyFilename()
    return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
         \ ('' != expand('%:.') ? expand('%:.') : '[No Name]') .
         \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyGit()
    let hunk_symbols = ['+', '~', '-']
    let string = ''
    let hunks = exists('*GitGutterGetHunkSummary') ? GitGutterGetHunkSummary() : []

    if !empty(hunks)
        for i in [0, 1, 2]
            let string .= printf('%s%s ', hunk_symbols[i], hunks[i])
        endfor
    endif

    return exists("*fugitive#head") ? string."⎇  ".fugitive#head(7) : ""
endfunction


"" ==================== CtrlP ====================
" Regex file opener

let g:ctrlp_max_files = 0
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_custom_ignore = '^\.git'


"" ==================== Fugitive ====================
autocmd BufReadPost fugitive://* set bufhidden=delete       "Stops fugitive files being left in buffer by removing all but currently visible


"" ==================== Mapping Syntax ====================
autocmd BufRead,BufNewFile *.tache setfiletype html


"" ==================== Emmet ====================
let g:user_emmet_install_global = 0
autocmd FileType phtml,html,tache,css EmmetInstall


"" ==================== MacVim ====================
" Customisations for MacVim (GUI Mode)
set guioptions-=T      "Removes top toolbar


"" ==================== Key (re)Mappings ====================
" Makes up/down on line wrapped lines work better (more intuitive)
nnoremap j gj
nnoremap k gk
" Best tab navigation shorcuts
nnoremap <C-h> gT
nnoremap <C-l> gt
" Open last file with Ctrl+e
nnoremap <C-e> :e#<CR>
"Shows and hides invisible characters
noremap <leader>e :set list!<CR>

" Split resizing
nnoremap <leader>- :res -5<CR>
nnoremap <leader>= :res +5<CR>
nnoremap <leader>. :vertical resize -5<CR>
nnoremap <leader>, :vertical resize +5<CR>

" GitGutter Navigate
nmap gh <Plug>GitGutterNextHunk
nmap gH <Plug>GitGutterPrevHunk
nmap <C-j> <Plug>GitGutterNextHunk
nmap <C-k> <Plug>GitGutterPrevHunk

"Toggle search highlighting
nnoremap <leader>h :set hlsearch!<CR>
"Displays files in buffer and quickly swap with regex matching or number
nnoremap <leader>l :ls<CR>:b<space>
"Toggle line numbers
nnoremap <leader>n :set number!<CR>
"Toggle line number mode
nnoremap <F3> :NumbersToggle<CR>
nnoremap <leader>ev :vsplit ~/.vimrc<CR>
nnoremap <leader>sv :source ~/.vimrc<CR>:echom "Reloaded vimrc"<CR>

nnoremap <leader>" ea"<esc>hbi"<esc>lel
nnoremap <leader>' ea'<esc>hbi'<esc>lel

nnoremap <leader>ga :Git add %:p<CR><CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit -v -q<CR>
nnoremap <leader>gt :Gcommit -v -q %:p<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>ge :Gedit<CR>
nnoremap <leader>gr :Gread<CR>
nnoremap <leader>gw :Gwrite<CR><CR>
nnoremap <leader>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <leader>gp :Ggrep -n<Space>
nnoremap <leader>gm :Gmove<Space>
nnoremap <leader>gb :Git branch<Space>
nnoremap <leader>go :Git checkout<Space>
nnoremap <leader>gps :Dispatch! git push<CR>
nnoremap <leader>gpl :Dispatch! git pull<CR>

map <F6> :Gblame<CR>
map <F7> :NERDTreeToggle<CR>
map <F8> :TagbarToggle<CR>
map <F9> :call <SID>align()<CR>
"Ctags - Open definitions in new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>


"" ==================== Misc ====================
" Miscellaneous config

au FileType gitcommit set tw=0      " Stop vim line wrap in gitcommit
set wildmode=list:longest,list:full " Simulate zsh tab completion
set scrolloff=4                     " Number of lines from vertical edge to start scrolling

if exists('+colorcolumn')
    " Add column line at 80 characters
    set colorcolumn=100
endif
