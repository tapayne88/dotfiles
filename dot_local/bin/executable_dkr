#!/usr/bin/env bash

set -Euo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] <command>

Script for running docker commands with some defaults and the help of fzf

Options:
  -h, --help      Print this help and exit
  -v, --verbose   Print script debug info

Commands:
  ps              List all containers using \`docker ps --all\`
  rm              Remove docker containers with force
  rmi             Remove docker images with force
  exec            Exec into a running container
  run             Run a container image

EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  flag=0
  param=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

parse_params "$@"
setup_colors

# script logic

command_ps() {
  # Do we need to sudo?
  docker ps > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    command="sudo docker"
  else
    command="docker"
  fi
  eval "$command ps --all"
}

command_rm() {
  # Do we need to sudo?
  docker ps > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    # If we need to sudo then we're not on mac, therefore we likely have GNU tools not BSD,
    # hence the --no-run-if-empty (which BSD seems to have by default)
    command="sudo docker"
    xargs="xargs --no-run-if-empty"
  else
    command="docker"
    xargs="xargs"
  fi
  eval "$command ps --all" | fzf --height 15 --multi --header-lines=1 | awk '{ print $1 }' | eval "$xargs $command rm --force"
}

command_rmi() {
  # Do we need to sudo?
  docker ps > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    # If we need to sudo then we're not on mac, therefore we likely have GNU tools not BSD,
    # hence the --no-run-if-empty (which BSD seems to have by default)
    command="sudo docker"
    xargs="xargs --no-run-if-empty"
  else
    command="docker"
    xargs="xargs"
  fi
  eval "$command images --all" | fzf --height 15 --multi --header-lines=1 | awk '{ print $3 }' | eval "$xargs $command rmi --force"
}

command_exec() {
  SHELL_PATH="${args[1]}"
  if [ -z "$SHELL_PATH" ]; then
    echo "pass shell path as first argument, i.e. drr /bin/bash"
    return 1
  fi

  # Do we need to sudo?
  docker ps > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    # If we need to sudo then we're not on mac, therefore we likely have GNU tools not BSD,
    # hence the --no-run-if-empty (which BSD seems to have by default)
    command="sudo docker"
    xargs="xargs --no-run-if-empty"
  else
    command="docker"
    xargs="xargs"
  fi
  eval "$command ps" | fzf --height 15 --header-lines=1 | awk '{ print $1 }' | eval "$xargs -I '{}' --open-tty $command exec --interactive --tty {} $SHELL_PATH"
}

command_run() {
  die "not yet implemented"
}

while :; do
  case "${args[0]}" in
  ps) command_ps ;;
  rm) command_rm ;;
  rmi) command_rmi ;;
  exec) command_exec ;;
  run) command_run ;;
  *) die "Unknown command: $1" ;;
  esac
  break
done
