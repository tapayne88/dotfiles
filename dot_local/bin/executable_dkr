#!/usr/bin/env bash

set -Euo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] <command>

Script for running docker commands with some defaults and the help of fzf

Options:
  -h, --help      Print this help and exit
  -v, --verbose   Print script debug info

Commands:
  ps              List all containers using \`docker ps --all\`
  rm              Remove docker containers with force
  rmi             Remove docker images with force
  shell           Start shell in a running container
  exec            Exec into a running container
  run             Run a container image
  logs            Tail running container logs
  containers      Get container IDs of running containers
  images          Get image IDs of container images

EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  flag=0
  param=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

parse_params "$@"
setup_colors

###########
# helpers #
###########

ps_cmd="ps --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Command}}'"

get_docker_cmd() {
  docker_msg=$(docker ps 2>&1)
  if [ $? -eq 1 ]; then
    if echo "$docker_msg" | grep --quiet "^Cannot connect to Docker daemon"; then
      msg "$docker_msg"
      echo ""
    else
      echo "sudo docker"
    fi
  else
    echo "docker"
  fi
}

get_xargs_cmd() {
  echo "test" | xargs --no-run-if-empty > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    echo "xargs"
  else
    echo "xargs --no-run-if-empty"
  fi
}

get_fzf_cmd() {
  echo "fzf --height 15"
}

############
# commands #
############

command_ps() {
  docker_cmd=$(get_docker_cmd)
  if [ -z "$docker_cmd" ]; then
    exit 1
  fi

  eval "$docker_cmd $ps_cmd --all ${args[*]:1}"
}

command_rm() {
  docker_cmd=$(get_docker_cmd)
  if [ -z "$docker_cmd" ]; then
    exit 1
  fi

  xargs_cmd=$(get_xargs_cmd)
  eval "$docker_cmd $ps_cmd --all" | $(get_fzf_cmd) --multi --header-lines=1 | awk '{ print $1 }' | eval "$xargs_cmd $docker_cmd rm --force ${args[*]:1}"
}

command_rmi() {
  docker_cmd=$(get_docker_cmd)
  if [ -z "$docker_cmd" ]; then
    exit 1
  fi

  xargs_cmd=$(get_xargs_cmd)
  eval "$docker_cmd images --all" | $(get_fzf_cmd) --multi --header-lines=1 | awk '{ print $3 }' | eval "$xargs_cmd $docker_cmd rmi --force ${args[*]:1}"
}

command_shell() {
  docker_cmd=$(get_docker_cmd)
  if [ -z "$docker_cmd" ]; then
    exit 1
  fi

  container=$(eval "$docker_cmd $ps_cmd" | $(get_fzf_cmd) --header-lines=1 | awk '{ print $1 }')
  if [ -z "$container" ]; then
    exit 0
  fi

  container_shell=$(eval "$docker_cmd exec --interactive --tty $container cat /etc/shells" | grep "^/" | $(get_fzf_cmd) --header="Pick shell" | sed 's/\r$//')
  if [ -z "$container_shell" ]; then
    exit 0
  fi

  eval "$docker_cmd exec --interactive --tty ${args[*]:1} $container $container_shell" 2> /dev/null
}

command_exec() {
  docker_cmd=$(get_docker_cmd)
  if [ -z "$docker_cmd" ]; then
    exit 1
  fi

  xargs_cmd=$(get_xargs_cmd)
  container=$(eval "$docker_cmd $ps_cmd" | $(get_fzf_cmd) --header-lines=1 | awk '{ print $1 }')

  if [ -z "$container" ]; then
    exit 0
  fi

  read -r -p "Enter cmd: " cmd

  eval "$docker_cmd exec --interactive --tty ${args[*]:1} $container $cmd" 2> /dev/null
}

command_run() {
  docker_cmd=$(get_docker_cmd)
  if [ -z "$docker_cmd" ]; then
    exit 1
  fi

  xargs_cmd=$(get_xargs_cmd)
  container=$(eval "$docker_cmd images" | $(get_fzf_cmd) --header-lines=1 | awk '{ print $3 }')

  if [ -z "$container" ]; then
    exit 0
  fi

  read -r -p "Enter cmd: " cmd

  eval "$docker_cmd run --interactive --tty ${args[*]:1} $container $cmd"
}

command_logs() {
  docker_cmd=$(get_docker_cmd)
  if [ -z "$docker_cmd" ]; then
    exit 1
  fi

  container=$(eval "$docker_cmd $ps_cmd" | $(get_fzf_cmd) --header-lines=1 | awk '{ print $1 }')
  if [ -z "$container" ]; then
    exit 0
  fi

  eval "$docker_cmd logs $container ${args[*]:1}"
}

command_containers() {
  docker_cmd=$(get_docker_cmd)
  if [ -z "$docker_cmd" ]; then
    exit 1
  fi

  eval "$docker_cmd $ps_cmd ${args[*]:1}" | $(get_fzf_cmd) --multi --header-lines=1 | awk '{ print $1 }'
}

command_images() {
  docker_cmd=$(get_docker_cmd)
  if [ -z "$docker_cmd" ]; then
    exit 1
  fi

  eval "$docker_cmd images ${args[*]:1}" | $(get_fzf_cmd) --multi --header-lines=1 | awk '{ print $3 }'
}

########
# Main #
########

while :; do
  case "${args[0]}" in
  ps) command_ps ;;
  rm) command_rm ;;
  rmi) command_rmi ;;
  shell) command_shell ;;
  exec) command_exec ;;
  run) command_run ;;
  logs) command_logs ;;
  containers) command_containers ;;
  images) command_images ;;
  *) die "Unknown command: $1" ;;
  esac
  break
done
