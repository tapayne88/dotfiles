#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

THEME_FNAME="$XDG_CONFIG_HOME/term_theme"

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] <command>

Script for manipulating the theme of my terminal, configuring kitty, tmux and neovim in sync

Options:
  -h, --help      Print this help and exit
  -v, --verbose   Print script debug info

Commands:
  echo            Echo current terminal theme, "light" or "dark"
  toggle          Toggle terminal theme to alternative theme
  light           Set terminal theme to "light"
  dark            Set terminal theme to "dark"

EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  flag=0
  param=''

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  return 0
}

set_bat_theme() {
  echo "--theme=\"$1\"" > "$XDG_CONFIG_HOME/bat/config"
}

set_kitty_theme() {
  if [ "$TERM" != "xterm-kitty" ]; then
    die "${YELLOW}   unsupported terminal${NOFORMAT}\nSupport for colour scheme changing is only available in kitty"
  fi
  echo "include $1.conf" > "$XDG_CONFIG_HOME/kitty/colors/theme.conf"
  kitty @ --to "$KITTY_LISTEN_ON" set-colors "$XDG_CONFIG_HOME/kitty/colors/$THEME.conf"
}

set_system_theme() {
  [ "$1" = "nord" ] && dark-mode on > /dev/null 2>&1 || dark-mode off > /dev/null 2>&1 
}

read_theme() {
  cat "$THEME_FNAME" 2> /dev/null
}

parse_params "$@"
setup_colors

################
# script logic #
################

command_echo() {
  THEME=$(read_theme)

  if [ "$THEME" = "" ]; then
    die "no theme set, try running \`term-theme dark\` or \`term-theme light\`"
  elif [ "$THEME" = "nord" ]; then
    echo "dark"
  else
    echo "light"
  fi
}

command_toggle() {
  THEME=$(read_theme)

  if [ "$THEME" = "" ]; then
    die "no theme set, try running \`term-theme dark\` or \`term-theme light\`"
  elif [ "$THEME" = "nord" ]; then
    THEME="tokyonight_day"
    set_bat_theme "base16"
  else
    THEME="nord"
    set_bat_theme "Nord"
  fi

  echo $THEME > "$THEME_FNAME"
  set_kitty_theme $THEME
  set_system_theme $THEME
  tmux source-file ~/.tmux.conf
}

command_light() {
  THEME="tokyonight_day"
  set_bat_theme "base16"

  echo $THEME > "$THEME_FNAME"
  set_kitty_theme $THEME
  set_system_theme $THEME
  tmux source-file ~/.tmux.conf
}

command_dark() {
  THEME="nord"
  set_bat_theme "Nord"

  echo $THEME > "$THEME_FNAME"
  set_kitty_theme $THEME
  set_system_theme $THEME
  tmux source-file ~/.tmux.conf
}

while :; do
  case "${args[0]}" in
  echo) command_echo ;;
  toggle) command_toggle ;;
  light) command_light ;;
  dark) command_dark ;;
  *) die "Unknown command: $1" ;;
  esac
  break
done
